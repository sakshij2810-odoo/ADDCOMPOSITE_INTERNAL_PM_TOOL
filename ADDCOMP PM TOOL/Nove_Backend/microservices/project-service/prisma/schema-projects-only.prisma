// This is your Prisma schema file for projects only
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                  String        @id @default(uuid())
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  projectType         ProjectType
  startDate           DateTime?
  endDate             DateTime?
  estimatedDays       Int?
  actualDays          Int?
  budget              Float?
  actualCost          Float?
  projectManagerId    String?
  clientId            String?
  googleDriveFolderId String?
  googleCalendarId    String?
  googleChatSpaceId   String?
  tags                String[]
  metadata            Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  createdBy           String?
  updatedBy           String?

  // Relations
  members             ProjectMember[]
  tasks               Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String   @default("MEMBER")
  addedBy   String?
  addedAt   DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects  Project[]

  @@map("clients")
}

model Task {
  id           String     @id @default(uuid())
  projectId    String
  parentTaskId String?
  assignedTo   String?
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  priority     Priority   @default(MEDIUM)
  taskType     TaskType
  estimatedDays Int?
  actualDays   Int?
  dueDate      DateTime?
  completedAt  DateTime?
  startedAt    DateTime?
  tags         String[]
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    String?
  updatedBy    String?

  // Relations
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask   Task?      @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks     Task[]     @relation("TaskHierarchy")

  @@map("tasks")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectType {
  CLIENT
  INTERNAL
  RND
  MAINTENANCE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum TaskType {
  DEVELOPMENT
  DESIGN
  TESTING
  DOCUMENTATION
  MEETING
  OTHER
}
